{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOeTYg+WjJPqXaUHhj9b89b"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DvNmWqEFPuVy","executionInfo":{"status":"ok","timestamp":1730695613828,"user_tz":480,"elapsed":15803,"user":{"displayName":"Simarpal Singh","userId":"11972719377733578956"}},"outputId":"03b0c7e5-1ac1-463d-a9a6-b5cb60b63344"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["import pandas as pd\n","\n","# Example of loading one CSV file\n","file_path = '/content/drive/MyDrive/flip-prediction-project/data/raw/Campaign Spending/Total Ad Spending - Sheet1.csv'\n","data = pd.read_csv(file_path)\n","\n","# Display the first few rows to ensure the file is loaded correctly\n","data.head()\n"],"metadata":{"id":"IwPfs-OHGJBC","colab":{"base_uri":"https://localhost:8080/","height":174},"executionInfo":{"status":"ok","timestamp":1729982431947,"user_tz":420,"elapsed":2171,"user":{"displayName":"Simarpal Singh","userId":"11972719377733578956"}},"outputId":"61f563a2-b095-47ae-863a-7b3f244527a4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["            State Total Ad Spending (in millions)\n","0          Nevada                             $28\n","1         Florida                            $258\n","2  North Carolina                            $111\n","3        Michigan                            $102"],"text/html":["\n","  <div id=\"df-8c957521-fce9-4632-a8b1-3cc7175f9df7\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>State</th>\n","      <th>Total Ad Spending (in millions)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Nevada</td>\n","      <td>$28</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Florida</td>\n","      <td>$258</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>North Carolina</td>\n","      <td>$111</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Michigan</td>\n","      <td>$102</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8c957521-fce9-4632-a8b1-3cc7175f9df7')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8c957521-fce9-4632-a8b1-3cc7175f9df7 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8c957521-fce9-4632-a8b1-3cc7175f9df7');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-703b7616-4851-4e98-8129-b349e9242e1d\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-703b7616-4851-4e98-8129-b349e9242e1d')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-703b7616-4851-4e98-8129-b349e9242e1d button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data","summary":"{\n  \"name\": \"data\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"State\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Florida\",\n          \"Michigan\",\n          \"Nevada\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total Ad Spending (in millions)\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"$258\",\n          \"$102\",\n          \"$28\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":2}]},{"cell_type":"code","source":["import pandas as pd\n","import os\n","\n","# Load the dataset\n","file_path = '/content/drive/MyDrive/flip-prediction-project/data/raw/Campaign Spending/Total Ad Spending - Sheet1.csv'  # Update this with the actual file path\n","data = pd.read_csv(file_path)\n","\n","# Remove dollar signs and commas, then convert to numeric\n","data['Total Ad Spending (in millions)'] = data['Total Ad Spending (in millions)'].replace({'\\$': '', ',': ''}, regex=True).astype(float)\n","\n","# Optional: Convert 'Total Ad Spending (in millions)' to actual dollar values\n","# data['Total Ad Spending ($)'] = data['Total Ad Spending (in millions)'] * 1e6\n","\n","# Define the folder and filename for saving the cleaned data\n","save_folder = '/content/drive/MyDrive/flip-prediction-project/data/processed'  # Update this with the desired folder path\n","save_filename = 'cleaned_ad_spending_data.csv'\n","save_path = os.path.join(save_folder, save_filename)\n","\n","# Ensure the folder exists\n","os.makedirs(save_folder, exist_ok=True)\n","\n","# Save the cleaned data\n","data.to_csv(save_path, index=False)\n","print(f\"Cleaned data saved to {save_path}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gLT5UrOoIrps","executionInfo":{"status":"ok","timestamp":1729983585885,"user_tz":420,"elapsed":231,"user":{"displayName":"Simarpal Singh","userId":"11972719377733578956"}},"outputId":"0e4f8ce7-31bc-485e-d0b3-e3a43d24c9ac"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Cleaned data saved to /content/drive/MyDrive/flip-prediction-project/data/processed/cleaned_ad_spending_data.csv\n"]}]},{"cell_type":"code","source":["# Load the newly uploaded CSV file to inspect the content\n","file_path_new_csv = '/content/drive/MyDrive/flip-prediction-project/data/raw/Campaign Spending/Per State - Sheet1.csv'\n","\n","# Read the CSV file into a pandas dataframe\n","state_data_csv = pd.read_csv(file_path_new_csv)\n","\n","# Display the first few rows of the dataset to understand its structure\n","state_data_csv.head()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":181},"id":"e9haQs0xJJLE","executionInfo":{"status":"ok","timestamp":1729982449561,"user_tz":420,"elapsed":599,"user":{"displayName":"Simarpal Singh","userId":"11972719377733578956"}},"outputId":"5dd3ae07-3f92-469f-acdb-c9ddbdf9224c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      Candidate Nevada (Total in millions) Nevada (Campaign in millions)  \\\n","0  Donald Trump                      $6.80                         $5.80   \n","1     Joe Biden                     $20.70                         $9.70   \n","\n","  Nevada (Outside in millions) Michigan (Total in millions)  \\\n","0                        $1.00                       $21.50   \n","1                       $11.00                       $98.60   \n","\n","  Michigan (Campaign in millions) Michigan (Outside in millions)  \\\n","0                             $15                          $6.50   \n","1                          $33.80                         $64.80   \n","\n","  Florida (Total in millions) Florida (Campaign in millions)  \\\n","0                     $103.40                         $67.70   \n","1                     $154.10                         $82.30   \n","\n","  Florida (Outside in millions) North Carolina (Total in millions)  \\\n","0                        $35.70                             $65.40   \n","1                        $71.80                             $45.40   \n","\n","  North Carolina (Campaign in millions) North Carolina (Outside in millions)  \n","0                                $32.30                               $33.10  \n","1                                $42.50                                $2.90  "],"text/html":["\n","  <div id=\"df-74486b1c-7ce1-4454-b812-823c87858ae6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Candidate</th>\n","      <th>Nevada (Total in millions)</th>\n","      <th>Nevada (Campaign in millions)</th>\n","      <th>Nevada (Outside in millions)</th>\n","      <th>Michigan (Total in millions)</th>\n","      <th>Michigan (Campaign in millions)</th>\n","      <th>Michigan (Outside in millions)</th>\n","      <th>Florida (Total in millions)</th>\n","      <th>Florida (Campaign in millions)</th>\n","      <th>Florida (Outside in millions)</th>\n","      <th>North Carolina (Total in millions)</th>\n","      <th>North Carolina (Campaign in millions)</th>\n","      <th>North Carolina (Outside in millions)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Donald Trump</td>\n","      <td>$6.80</td>\n","      <td>$5.80</td>\n","      <td>$1.00</td>\n","      <td>$21.50</td>\n","      <td>$15</td>\n","      <td>$6.50</td>\n","      <td>$103.40</td>\n","      <td>$67.70</td>\n","      <td>$35.70</td>\n","      <td>$65.40</td>\n","      <td>$32.30</td>\n","      <td>$33.10</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Joe Biden</td>\n","      <td>$20.70</td>\n","      <td>$9.70</td>\n","      <td>$11.00</td>\n","      <td>$98.60</td>\n","      <td>$33.80</td>\n","      <td>$64.80</td>\n","      <td>$154.10</td>\n","      <td>$82.30</td>\n","      <td>$71.80</td>\n","      <td>$45.40</td>\n","      <td>$42.50</td>\n","      <td>$2.90</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-74486b1c-7ce1-4454-b812-823c87858ae6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-74486b1c-7ce1-4454-b812-823c87858ae6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-74486b1c-7ce1-4454-b812-823c87858ae6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-543027d3-9c47-4414-8709-e29fd0efb93a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-543027d3-9c47-4414-8709-e29fd0efb93a')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-543027d3-9c47-4414-8709-e29fd0efb93a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"state_data_csv","summary":"{\n  \"name\": \"state_data_csv\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Candidate\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Joe Biden\",\n          \"Donald Trump\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Nevada (Total in millions)\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"$20.70\",\n          \"$6.80\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Nevada (Campaign in millions)\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"$9.70\",\n          \"$5.80\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Nevada (Outside in millions)\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"$11.00\",\n          \"$1.00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Michigan (Total in millions)\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"$98.60\",\n          \"$21.50\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Michigan (Campaign in millions)\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"$33.80\",\n          \"$15\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Michigan (Outside in millions)\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"$64.80\",\n          \"$6.50\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Florida (Total in millions)\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"$154.10\",\n          \"$103.40\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Florida (Campaign in millions)\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"$82.30\",\n          \"$67.70\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Florida (Outside in millions)\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"$71.80\",\n          \"$35.70\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"North Carolina (Total in millions)\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"$45.40\",\n          \"$65.40\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"North Carolina (Campaign in millions)\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"$42.50\",\n          \"$32.30\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"North Carolina (Outside in millions)\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"$2.90\",\n          \"$33.10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["import csv\n","import os\n","import pandas as pd\n","\n","# Load and clean the dataset as before\n","file_path = '/content/drive/MyDrive/flip-prediction-project/data/raw/Campaign Spending/Per State - Sheet1.csv'\n","state_data_csv = pd.read_csv(file_path)\n","\n","# List of columns that need cleaning\n","columns_to_clean = [\n","    'Nevada (Total in millions)', 'Nevada (Campaign in millions)', 'Nevada (Outside in millions)',\n","    'Michigan (Total in millions)', 'Michigan (Campaign in millions)', 'Michigan (Outside in millions)',\n","    'Florida (Total in millions)', 'Florida (Campaign in millions)', 'Florida (Outside in millions)',\n","    'North Carolina (Total in millions)', 'North Carolina (Campaign in millions)', 'North Carolina (Outside in millions)'\n","]\n","\n","# Remove dollar signs and commas and convert to numeric values\n","for col in columns_to_clean:\n","    state_data_csv[col] = state_data_csv[col].replace({'\\$': '', ',': ''}, regex=True).astype(float)\n","\n","# Define temporary save path and final save path\n","temp_save_path = '/content/cleaned_state_data_temp.csv'\n","final_save_folder = '/content/drive/MyDrive/flip-prediction-project/data/processed'\n","final_save_path = os.path.join(final_save_folder, 'cleaned_state_data.csv')\n","\n","# Ensure the final directory exists\n","os.makedirs(final_save_folder, exist_ok=True)\n","\n","# Save the cleaned data to a temporary location\n","state_data_csv.to_csv(temp_save_path, index=False, quoting=csv.QUOTE_NONNUMERIC)\n","\n","# Verification: Check if the saved file is readable as a CSV\n","try:\n","    # Try reading the temp file to verify it's in CSV format\n","    temp_df = pd.read_csv(temp_save_path)\n","\n","    # If reading succeeds, save to the final location\n","    temp_df.to_csv(final_save_path, index=False, quoting=csv.QUOTE_NONNUMERIC)\n","    print(f\"Cleaned data successfully verified and saved to {final_save_path}\")\n","\n","except Exception as e:\n","    print(f\"Failed to verify CSV format: {e}\")\n","    print(\"File not saved to the final destination.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rWgC_PqjJkwA","executionInfo":{"status":"ok","timestamp":1729986791340,"user_tz":420,"elapsed":259,"user":{"displayName":"Simarpal Singh","userId":"11972719377733578956"}},"outputId":"d5fd0ecf-e36a-495b-e21f-eb68c4c1e214"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Cleaned data successfully verified and saved to /content/drive/MyDrive/flip-prediction-project/data/processed/cleaned_state_data.csv\n"]}]},{"cell_type":"code","source":["# Load the demographics data\n","demographics_path = '/content/drive/MyDrive/flip-prediction-project/data/raw/Demographics/DECENNIALDP2020.DP1-2024-10-22T221235.csv'\n","demographics_data = pd.read_csv(demographics_path)\n","\n","# Display the first few rows to understand its structure\n","demographics_data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"lowU7SBXLn_T","executionInfo":{"status":"ok","timestamp":1729982458588,"user_tz":420,"elapsed":1022,"user":{"displayName":"Simarpal Singh","userId":"11972719377733578956"}},"outputId":"f75a9f3c-e8c0-4f05-fae4-ae6992322891"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["         Label (Grouping) Michigan!!Count Michigan!!Percent Nevada!!Count  \\\n","0             SEX AND AGE             NaN               NaN           NaN   \n","1        Total population      10,077,331            100.0%     3,104,614   \n","2           Under 5 years         548,875              5.4%       174,032   \n","3            5 to 9 years         594,605              5.9%       192,429   \n","4          10 to 14 years         628,558              6.2%       205,184   \n","\n","  Nevada!!Percent North Carolina!!Count North Carolina!!Percent  \n","0             NaN                   NaN                     NaN  \n","1          100.0%            10,439,388                  100.0%  \n","2            5.6%               574,468                    5.5%  \n","3            6.2%               625,115                    6.0%  \n","4            6.6%               679,932                    6.5%  "],"text/html":["\n","  <div id=\"df-93654690-4caf-475c-a19b-40bc8db5f48a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Label (Grouping)</th>\n","      <th>Michigan!!Count</th>\n","      <th>Michigan!!Percent</th>\n","      <th>Nevada!!Count</th>\n","      <th>Nevada!!Percent</th>\n","      <th>North Carolina!!Count</th>\n","      <th>North Carolina!!Percent</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>SEX AND AGE</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Total population</td>\n","      <td>10,077,331</td>\n","      <td>100.0%</td>\n","      <td>3,104,614</td>\n","      <td>100.0%</td>\n","      <td>10,439,388</td>\n","      <td>100.0%</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Under 5 years</td>\n","      <td>548,875</td>\n","      <td>5.4%</td>\n","      <td>174,032</td>\n","      <td>5.6%</td>\n","      <td>574,468</td>\n","      <td>5.5%</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>5 to 9 years</td>\n","      <td>594,605</td>\n","      <td>5.9%</td>\n","      <td>192,429</td>\n","      <td>6.2%</td>\n","      <td>625,115</td>\n","      <td>6.0%</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>10 to 14 years</td>\n","      <td>628,558</td>\n","      <td>6.2%</td>\n","      <td>205,184</td>\n","      <td>6.6%</td>\n","      <td>679,932</td>\n","      <td>6.5%</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-93654690-4caf-475c-a19b-40bc8db5f48a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-93654690-4caf-475c-a19b-40bc8db5f48a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-93654690-4caf-475c-a19b-40bc8db5f48a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-1938d6fb-c22f-4f93-9af1-141fc1f4cb1d\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1938d6fb-c22f-4f93-9af1-141fc1f4cb1d')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-1938d6fb-c22f-4f93-9af1-141fc1f4cb1d button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"demographics_data","summary":"{\n  \"name\": \"demographics_data\",\n  \"rows\": 174,\n  \"fields\": [\n    {\n      \"column\": \"Label (Grouping)\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 106,\n        \"samples\": [\n          \"\\u00a0\\u00a0\\u00a0\\u00a0Homeowner vacancy rate (percent) [4]\",\n          \"\\u00a0\\u00a0\\u00a0\\u00a0\\u00a0\\u00a0\\u00a0\\u00a040 to 44 years\",\n          \"\\u00a0\\u00a0\\u00a0\\u00a0\\u00a0\\u00a0\\u00a0\\u00a010 to 14 years\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Michigan!!Count\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 152,\n        \"samples\": [\n          \"4,050,552\",\n          \"116,317\",\n          \"448\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Michigan!!Percent\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 95,\n        \"samples\": [\n          \"97.8%\",\n          \"6.5%\",\n          \"28.3%\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Nevada!!Count\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 152,\n        \"samples\": [\n          \"1,214,405\",\n          \"15,874\",\n          \"2,041\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Nevada!!Percent\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 92,\n        \"samples\": [\n          \"78.3%\",\n          \"7.0%\",\n          \"11.4%\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"North Carolina!!Count\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 152,\n        \"samples\": [\n          \"4,253,380\",\n          \"164,498\",\n          \"1,538\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"North Carolina!!Percent\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 97,\n        \"samples\": [\n          \"20.2%\",\n          \"81.6%\",\n          \"2.6%\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["import pandas as pd\n","import os\n","\n","# Load the dataset\n","file_path = '/content/drive/MyDrive/flip-prediction-project/data/raw/Demographics/DECENNIALDP2020.DP1-2024-10-26T224622.csv'  # Update this with the actual file path\n","data = pd.read_csv(file_path)\n","\n","# Rename columns for easier access\n","data.columns = [\n","    \"Category\", \"Florida_Count\", \"Florida_Percent\",\n","    \"Michigan_Count\", \"Michigan_Percent\",\n","    \"Nevada_Count\", \"Nevada_Percent\",\n","    \"NC_Count\", \"NC_Percent\"\n","]\n","\n","# Drop rows with all null values in count columns\n","data = data.dropna(subset=[\"Florida_Count\", \"Michigan_Count\", \"Nevada_Count\", \"NC_Count\"], how=\"all\")\n","\n","# Clean up percentages by removing \"%\" and converting to float\n","for col in [\"Florida_Percent\", \"Michigan_Percent\", \"Nevada_Percent\", \"NC_Percent\"]:\n","    data[col] = pd.to_numeric(data[col].str.replace(\"%\", \"\"), errors=\"coerce\")\n","\n","# Convert Count columns to numeric, treating non-numeric values as NaN\n","for col in [\"Florida_Count\", \"Michigan_Count\", \"Nevada_Count\", \"NC_Count\"]:\n","    data[col] = pd.to_numeric(data[col].str.replace(\",\", \"\"), errors=\"coerce\")\n","\n","# Define the folder and filename for saving the cleaned data\n","save_folder = '/content/drive/MyDrive/flip-prediction-project/data/processed'\n","save_filename = 'cleaned_data.csv'\n","save_path = os.path.join(save_folder, save_filename)\n","\n","# Ensure the folder exists\n","os.makedirs(save_folder, exist_ok=True)\n","\n","# Save the cleaned data\n","data.to_csv(save_path, index=False)\n","print(f\"Cleaned data saved to {save_path}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZGzU57xsQTWp","executionInfo":{"status":"ok","timestamp":1729983485582,"user_tz":420,"elapsed":249,"user":{"displayName":"Simarpal Singh","userId":"11972719377733578956"}},"outputId":"b1380165-dec5-490e-ad0a-7b7cb53d696f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Cleaned data saved to /content/drive/MyDrive/flip-prediction-project/data/processed/cleaned_data.csv\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import os\n","\n","# Define file paths for each state's data\n","florida_path = '/content/drive/MyDrive/flip-prediction-project/data/raw/Voter Turnout/Florida - Registered Voters.csv'  # Update with the correct path\n","north_carolina_path = '/content/drive/MyDrive/flip-prediction-project/data/raw/Voter Turnout/North Carolina - Sheet1.csv'  # Update with the correct path\n","nevada_path = '/content/drive/MyDrive/flip-prediction-project/data/raw/Voter Turnout/Nevada - Sheet1.csv'  # Update with the correct path\n","michigan_path = '/content/drive/MyDrive/flip-prediction-project/data/raw/Voter Turnout/Michigan - Sheet1.csv'  # Update with the correct path\n","\n","# Load each state's data\n","florida_data = pd.read_csv(florida_path)\n","north_carolina_data = pd.read_csv(north_carolina_path)\n","nevada_data = pd.read_csv(nevada_path)\n","michigan_data = pd.read_csv(michigan_path)\n","\n","# Standardize column names and clean turnout data for each state\n","# Florida\n","florida_data = florida_data.rename(columns={\n","    'County': 'County',\n","    'Registered Voters': 'Registered',\n","    'Ballots Cast': 'Ballots Cast',\n","    'Voter Turnout': 'Turnout'\n","})\n","florida_data['Turnout'] = pd.to_numeric(florida_data['Turnout'].str.replace('%', ''), errors='coerce')\n","\n","# North Carolina\n","north_carolina_data = north_carolina_data.rename(columns={\n","    'County': 'County',\n","    'Registered': 'Registered',\n","    'Voted': 'Ballots Cast',\n","    'Turnout': 'Turnout'\n","})\n","north_carolina_data['Turnout'] = pd.to_numeric(north_carolina_data['Turnout'], errors='coerce')\n","\n","# Nevada\n","nevada_data = nevada_data.rename(columns={\n","    'County': 'County',\n","    'Registered Voters': 'Registered',\n","    'Total Ballots cast': 'Ballots Cast',\n","    '% of active voters': 'Turnout'\n","})\n","nevada_data['Turnout'] = pd.to_numeric(nevada_data['Turnout'], errors='coerce')\n","\n","# Michigan\n","michigan_data.columns = ['County', 'Registered', 'Ballots Cast', 'Turnout']\n","michigan_data['Turnout'] = pd.to_numeric(michigan_data['Turnout'], errors='coerce')\n","\n","# Aggregate data for each state\n","state_aggregation = {\n","    'Florida': florida_data,\n","    'North Carolina': north_carolina_data,\n","    'Nevada': nevada_data,\n","    'Michigan': michigan_data\n","}\n","\n","# Prepare an aggregated DataFrame\n","aggregated_data = pd.DataFrame({\n","    'State': [], 'Total Registered': [], 'Total Ballots Cast': [], 'Average Turnout (%)': []\n","})\n","\n","# Perform the aggregation for each state\n","for state, df in state_aggregation.items():\n","    total_registered = df['Registered'].sum()\n","    total_ballots_cast = df['Ballots Cast'].sum()\n","    average_turnout = df['Turnout'].mean()\n","\n","    aggregated_data = pd.concat([aggregated_data, pd.DataFrame({\n","        'State': [state],\n","        'Total Registered': [total_registered],\n","        'Total Ballots Cast': [total_ballots_cast],\n","        'Average Turnout (%)': [average_turnout]\n","    })], ignore_index=True)\n","\n","# Define the folder and filename for saving the aggregated data\n","save_folder = '/content/drive/MyDrive/flip-prediction-project/data/processed'  # Update with the desired folder path\n","save_filename = 'state_level_voter_turnout_data.csv'\n","save_path = os.path.join(save_folder, save_filename)\n","\n","# Ensure the folder exists\n","os.makedirs(save_folder, exist_ok=True)\n","\n","# Save the aggregated data\n","aggregated_data.to_csv(save_path, index=False)\n","print(f\"State-level aggregated voter turnout data saved to {save_path}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2t4I41gQD7JR","executionInfo":{"status":"ok","timestamp":1729984150338,"user_tz":420,"elapsed":1537,"user":{"displayName":"Simarpal Singh","userId":"11972719377733578956"}},"outputId":"0548f4f3-a24d-4637-aaa4-a6edae57bb61"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["State-level aggregated voter turnout data saved to /content/drive/MyDrive/flip-prediction-project/data/processed/state_level_voter_turnout_data.csv\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import os\n","\n","# Load the dataset\n","election_data_path = '/content/drive/MyDrive/flip-prediction-project/data/raw/2020 election/updated election data - csv.csv'  # Update with the correct path\n","election_data = pd.read_csv(election_data_path)\n","\n","# Aggregate to state level: calculate total votes and vote share percentage by party\n","state_party_votes = election_data.groupby(['state', 'party']).agg({\n","    'total_votes': 'sum'\n","}).reset_index()\n","\n","# Calculate the total votes for each state across all parties and merge\n","state_total_votes = state_party_votes.groupby('state')['total_votes'].sum().reset_index()\n","state_total_votes = state_total_votes.rename(columns={'total_votes': 'state_total_votes'})\n","state_party_votes = state_party_votes.merge(state_total_votes, on='state')\n","state_party_votes['vote_share_percentage'] = (state_party_votes['total_votes'] / state_party_votes['state_total_votes']) * 100\n","\n","# Determine the winning party and their vote share for each state\n","winning_party = state_party_votes.loc[state_party_votes.groupby('state')['vote_share_percentage'].idxmax()]\n","winning_party = winning_party[['state', 'party', 'vote_share_percentage']].rename(\n","    columns={'party': 'winning_party', 'vote_share_percentage': 'winning_party_percentage'}\n",")\n","\n","# Get the second place party's vote share to calculate the margin of victory\n","second_place_party = (\n","    state_party_votes\n","    .sort_values(['state', 'vote_share_percentage'], ascending=[True, False])\n","    .groupby('state')\n","    .nth(1)\n","    .reset_index()[['state', 'vote_share_percentage']]\n",")\n","second_place_party = second_place_party.rename(columns={'vote_share_percentage': 'second_place_percentage'})\n","\n","# Merge the winning and second place data to calculate the margin of victory\n","state_summary = winning_party.merge(second_place_party, on='state')\n","state_summary['margin_of_victory'] = state_summary['winning_party_percentage'] - state_summary['second_place_percentage']\n","\n","# Define the folder and filename for saving the enhanced data\n","save_folder = '/content/drive/MyDrive/flip-prediction-project/data/processed'  # Update with the desired folder path\n","save_filename = 'enhanced_state_level_election_data.csv'\n","save_path = os.path.join(save_folder, save_filename)\n","\n","# Ensure the folder exists\n","os.makedirs(save_folder, exist_ok=True)\n","\n","# Save the enhanced state-level data\n","state_summary.to_csv(save_path, index=False)\n","print(f\"Enhanced state-level election data saved to {save_path}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CQashOtZGuwM","executionInfo":{"status":"ok","timestamp":1729984437210,"user_tz":420,"elapsed":473,"user":{"displayName":"Simarpal Singh","userId":"11972719377733578956"}},"outputId":"47c86539-8907-4253-f968-0a45838f2860"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enhanced state-level election data saved to /content/drive/MyDrive/flip-prediction-project/data/processed/enhanced_state_level_election_data.csv\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import os\n","import glob\n","\n","# Path to the root folder containing all state folders\n","root_folder = \"/content/drive/MyDrive/flip-prediction-project/data/raw/Sentiment Data\"\n","\n","# Path to the output folder where you want to save the combined CSV\n","output_folder = \"/content/drive/MyDrive/flip-prediction-project/data/processed\"\n","\n","# Ensure the output folder exists\n","os.makedirs(output_folder, exist_ok=True)\n","\n","# Full path to save the combined CSV file\n","output_file_path = os.path.join(output_folder, \"combined_sentiment_data.csv\")\n","\n","# List to store all data frames\n","data_frames = []\n","\n","# Loop through each state folder\n","for state_folder in glob.glob(os.path.join(root_folder, \"*\")):\n","    # Get the state name from the folder name\n","    state_name = os.path.basename(state_folder)\n","\n","    # Loop through each file in the state folder\n","    for file_path in glob.glob(os.path.join(state_folder, \"*.csv\")):\n","        # Read the CSV file with utf-8 encoding\n","        try:\n","            df = pd.read_csv(file_path, encoding='utf-8')\n","        except Exception as e:\n","            print(f\"Error reading {file_path}: {e}\")\n","            continue\n","\n","        # Strip any whitespace from column names\n","        df.columns = df.columns.str.strip()\n","\n","        # Check that 'Day' column exists after stripping\n","        if 'Day' not in df.columns:\n","            print(f\"Warning: 'Day' column missing in {file_path}. Please verify the file.\")\n","            continue  # Skip this file if 'Day' column is missing\n","\n","        # Determine candidate based on file name\n","        candidate = \"Trump\" if \"Trump\" in file_path else \"Kamala\"\n","\n","        # Add Candidate and State columns\n","        df['Candidate'] = candidate\n","        df['State'] = state_name\n","\n","        # Append to list\n","        data_frames.append(df)\n","\n","# Concatenate all data into a single DataFrame, preserving the 'Day' column\n","if data_frames:\n","    combined_data = pd.concat(data_frames, ignore_index=True)\n","\n","    # Save the combined data to the specified output folder\n","    combined_data.to_csv(output_file_path, index=False)\n","    print(f\"Combined sentiment data saved to '{output_file_path}'\")\n","else:\n","    print(\"No data frames to concatenate. Please check your files for date columns.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OU3aRqjkE7jZ","executionInfo":{"status":"ok","timestamp":1730696660512,"user_tz":480,"elapsed":2456,"user":{"displayName":"Simarpal Singh","userId":"11972719377733578956"}},"outputId":"3594837e-5fb5-45e3-ffbe-a9ac1b859508"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Combined sentiment data saved to '/content/drive/MyDrive/flip-prediction-project/data/processed/combined_sentiment_data.csv'\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","# Load the wide-format data\n","file_path = '/content/drive/MyDrive/flip-prediction-project/data/processed/combined_sentiment_data.csv'  # Update with your actual file path\n","wide_data = pd.read_csv(file_path)\n","\n","# Melt the data to go from wide to long format\n","long_data = pd.melt(\n","    wide_data,\n","    id_vars=['Day'],\n","    value_vars=[\n","        'Trump 2024: (Michigan)', 'Kamala 2024: (Michigan)', 'Kamala 2024: (Florida)',\n","        'Trump 2024: (Florida)', 'Trump 2024: (Nevada)', 'Kamala 2024: (Nevada)',\n","        'Kamala 2024: (North Carolina)', 'Trump 2024: (North Carolina)'\n","    ],\n","    var_name='Candidate_State',\n","    value_name='Sentiment Score'\n",")\n","\n","# Extract 'Candidate' and 'State' from 'Candidate_State' column\n","long_data[['Candidate', 'State']] = long_data['Candidate_State'].str.extract(r'(\\w+)\\s2024:\\s\\(([^)]+)\\)')\n","\n","# Drop the original 'Candidate_State' column as we have now split it into 'Candidate' and 'State'\n","long_data = long_data.drop(columns=['Candidate_State'])\n","\n","# Save the long-format data to a new CSV file\n","output_file_path = '/content/drive/MyDrive/flip-prediction-project/data/processed/reshaped_sentiment_data.csv'  # Update with your desired output path\n","long_data.to_csv(output_file_path, index=False)\n","\n","print(f\"Long-format sentiment data saved to '{output_file_path}'\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b-KWsJp1k3D_","executionInfo":{"status":"ok","timestamp":1730699008166,"user_tz":480,"elapsed":198,"user":{"displayName":"Simarpal Singh","userId":"11972719377733578956"}},"outputId":"c3b02baa-7ddc-4285-d83b-326e89c98db5"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Long-format sentiment data saved to '/content/drive/MyDrive/flip-prediction-project/data/processed/reshaped_sentiment_data.csv'\n"]}]}]}