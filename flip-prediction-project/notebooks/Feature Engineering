{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPkV1vODXIkbByjJtP1Kncb"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4oHtbkx8REF2","executionInfo":{"status":"ok","timestamp":1730763368599,"user_tz":480,"elapsed":17044,"user":{"displayName":"Simarpal Singh","userId":"11972719377733578956"}},"outputId":"9f33b23e-02bd-44ef-b646-e8d23c4f231f"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["import pandas as pd\n","import os\n","\n","# Load the datasets\n","spending_data_path = '/content/drive/MyDrive/flip-prediction-project/data/processed/cleaned_state_data.csv'\n","voter_data_path = '/content/drive/MyDrive/flip-prediction-project/data/processed/state_level_voter_turnout_data.csv'\n","spending_data = pd.read_csv(spending_data_path)\n","voter_data = pd.read_csv(voter_data_path)\n","\n","# Transpose spending data to get it in a state-by-state format\n","# Extract state and spending type directly\n","spending_data = spending_data.set_index('Candidate').T.reset_index()\n","spending_data[['State', 'Spending Type']] = spending_data['index'].str.extract(r'(.+?)\\s\\((.+?)\\)')\n","spending_data.drop(columns=['index'], inplace=True)\n","\n","# Pivot the data to have separate columns for each candidate and spending type\n","spending_data = spending_data.pivot_table(index='State', columns='Spending Type', values=['Donald Trump', 'Joe Biden']).reset_index()\n","\n","# Rename columns for simplicity\n","spending_data.columns = ['State', 'Total Spending Trump', 'Campaign Spending Trump', 'Outside Spending Trump',\n","                         'Total Spending Biden', 'Campaign Spending Biden', 'Outside Spending Biden']\n","\n","# Ensure consistent formatting of state names across both datasets\n","spending_data['State'] = spending_data['State'].str.strip()\n","voter_data['State'] = voter_data['State'].str.strip()\n","\n","# Merge with voter data to ensure all four states are included\n","spending_data = spending_data.merge(voter_data[['State', 'Total Registered']], on='State', how='inner')\n","\n","# Feature Engineering: Per Capita Spending for each candidate\n","spending_data['Per Capita Total Spending Trump'] = (spending_data['Total Spending Trump'] * 1e6) / spending_data['Total Registered']\n","spending_data['Per Capita Campaign Spending Trump'] = (spending_data['Campaign Spending Trump'] * 1e6) / spending_data['Total Registered']\n","spending_data['Per Capita Outside Spending Trump'] = (spending_data['Outside Spending Trump'] * 1e6) / spending_data['Total Registered']\n","\n","spending_data['Per Capita Total Spending Biden'] = (spending_data['Total Spending Biden'] * 1e6) / spending_data['Total Registered']\n","spending_data['Per Capita Campaign Spending Biden'] = (spending_data['Campaign Spending Biden'] * 1e6) / spending_data['Total Registered']\n","spending_data['Per Capita Outside Spending Biden'] = (spending_data['Outside Spending Biden'] * 1e6) / spending_data['Total Registered']\n","\n","# Spending Ratios for each candidate\n","spending_data['Campaign/Outside Spending Ratio Trump'] = spending_data['Campaign Spending Trump'] / spending_data['Outside Spending Trump']\n","spending_data['Campaign/Outside Spending Ratio Biden'] = spending_data['Campaign Spending Biden'] / spending_data['Outside Spending Biden']\n","\n","# Spending Bins (total spending for each candidate)\n","spending_data['Spending Bin Trump'] = pd.qcut(spending_data['Total Spending Trump'], q=3, labels=['Low', 'Medium', 'High'])\n","spending_data['Spending Bin Biden'] = pd.qcut(spending_data['Total Spending Biden'], q=3, labels=['Low', 'Medium', 'High'])\n","\n","# Define the folder and filename for saving the feature-engineered data\n","save_folder = '/content/drive/MyDrive/flip-prediction-project/data/processed/Feature Engineering'\n","os.makedirs(save_folder, exist_ok=True)\n","save_path = os.path.join(save_folder, 'feature_engineered_campaign_spending.csv')\n","\n","# Save the engineered data\n","spending_data.to_csv(save_path, index=False)\n","print(f\"Feature-engineered campaign spending data saved to {save_path}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-ByWeiZ1RkOP","executionInfo":{"status":"ok","timestamp":1730252509125,"user_tz":420,"elapsed":390,"user":{"displayName":"Simarpal Singh","userId":"11972719377733578956"}},"outputId":"9e7b5321-9c3b-43f6-c5cc-e9397fc000c8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Feature-engineered campaign spending data saved to /content/drive/MyDrive/flip-prediction-project/data/processed/Feature Engineering/feature_engineered_campaign_spending.csv\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import os\n","\n","# Load the voter turnout data\n","voter_data_path = '/content/drive/MyDrive/flip-prediction-project/data/processed/state_level_voter_turnout_data.csv'  # Update with correct path\n","voter_data = pd.read_csv(voter_data_path)\n","\n","# Feature Engineering: Calculate Turnout Rate\n","voter_data['Turnout Rate'] = (voter_data['Total Ballots Cast'] / voter_data['Total Registered']) * 100\n","\n","# Optional: Calculate Turnout Change if historical data is available\n","# Assuming previous election turnout data is available in 'Previous Ballots Cast' column\n","if 'Previous Ballots Cast' in voter_data.columns:\n","    voter_data['Previous Turnout Rate'] = (voter_data['Previous Ballots Cast'] / voter_data['Total Registered']) * 100\n","    voter_data['Turnout Change'] = voter_data['Turnout Rate'] - voter_data['Previous Turnout Rate']\n","    # Display the final data with Turnout Change\n","    display_columns = ['State', 'Total Registered', 'Total Ballots Cast', 'Turnout Rate', 'Turnout Change']\n","else:\n","    # Display the final data without Turnout Change\n","    display_columns = ['State', 'Total Registered', 'Total Ballots Cast', 'Turnout Rate']\n","\n","# Display the final data with new features\n","print(voter_data[display_columns].head())\n","\n","# Save the updated voter data with the new features\n","save_folder = '/content/drive/MyDrive/flip-prediction-project/data/processed/Feature Engineering'\n","os.makedirs(save_folder, exist_ok=True)\n","save_path = os.path.join(save_folder, 'feature_engineered_voter_turnout.csv')\n","voter_data.to_csv(save_path, index=False)\n","print(f\"Feature-engineered voter turnout data saved to {save_path}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5WydjSdSFOjC","executionInfo":{"status":"ok","timestamp":1730255029243,"user_tz":420,"elapsed":234,"user":{"displayName":"Simarpal Singh","userId":"11972719377733578956"}},"outputId":"e6f0b4fb-8046-410e-acf5-441cb3632d45"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["            State  Total Registered  Total Ballots Cast  Turnout Rate\n","0         Florida        14052552.0          10051366.0     71.526980\n","1  North Carolina         7371229.0           5544018.0     75.211583\n","2          Nevada         1821864.0           1425026.0     78.218023\n","3        Michigan         1504518.0            939592.0     62.451363\n","Feature-engineered voter turnout data saved to /content/drive/MyDrive/flip-prediction-project/data/processed/Feature Engineering/feature_engineered_voter_turnout.csv\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import os\n","\n","# Load the election data\n","election_data_path = '/content/drive/MyDrive/flip-prediction-project/data/processed/enhanced_state_level_election_data.csv'  # Update with your path\n","election_data = pd.read_csv(election_data_path)\n","\n","# Feature Engineering: Normalized Winning Party Vote Share\n","election_data['Normalized Winning Party Share'] = election_data['winning_party_percentage'] / (\n","    election_data['winning_party_percentage'] + election_data['second_place_percentage']\n",") * 100\n","\n","# Display the new features for review\n","print(election_data[['state', 'winning_party_percentage', 'second_place_percentage',\n","                     'margin_of_victory', 'Normalized Winning Party Share']].head())\n","\n","# Define the folder and filename for saving the engineered data\n","save_folder = '/content/drive/MyDrive/flip-prediction-project/data/processed/Feature Engineering'  # Update with your path\n","os.makedirs(save_folder, exist_ok=True)\n","save_path = os.path.join(save_folder, 'feature_engineered_election_data.csv')\n","\n","# Save the dataset with the new features\n","election_data.to_csv(save_path, index=False)\n","print(f\"Feature-engineered election data saved to {save_path}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tsyqo78fSPPs","executionInfo":{"status":"ok","timestamp":1730256831124,"user_tz":420,"elapsed":240,"user":{"displayName":"Simarpal Singh","userId":"11972719377733578956"}},"outputId":"f806dc36-8a63-4f27-bfb0-a6f351229a6d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["            state  winning_party_percentage  second_place_percentage  \\\n","0         Florida                 51.694755                48.305245   \n","1        Michigan                 51.413559                48.586441   \n","2          Nevada                 51.223117                48.776883   \n","3  North Carolina                 50.684183                49.315817   \n","\n","   margin_of_victory  Normalized Winning Party Share  \n","0           3.389509                       51.694755  \n","1           2.827119                       51.413559  \n","2           2.446235                       51.223117  \n","3           1.368365                       50.684183  \n","Feature-engineered election data saved to /content/drive/MyDrive/flip-prediction-project/data/processed/Feature Engineering/feature_engineered_election_data.csv\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","# Load initial demographic and ratio data\n","data_for_merging = pd.read_csv('/content/drive/MyDrive/flip-prediction-project/data/processed/Data for meding - Sheet1.csv')\n","ad_spending_data = pd.read_csv('/content/drive/MyDrive/flip-prediction-project/data/processed/cleaned_ad_spending_data.csv')\n","voter_turnout_data = pd.read_csv('/content/drive/MyDrive/flip-prediction-project/data/processed/state_level_voter_turnout_data.csv')\n","election_data = pd.read_csv('/content/drive/MyDrive/flip-prediction-project/data/processed/enhanced_state_level_election_data.csv')\n","\n","# Step 1: Clean and Standardize Column Names for `data_for_merging`\n","data_for_merging['State'] = data_for_merging['State'].replace({'Michican': 'Michigan'})  # Fix typo\n","data_for_merging.columns = [\n","    'state', 'median_age', 'male_to_female_ratio', 'white_percentage',\n","    'black_percentage', 'asian_percentage', 'hispanic_latino_percentage'\n","]\n","\n","# Step 2: Clean and Standardize Column Names for Other Datasets\n","ad_spending_data.columns = ['state', 'total_ad_spending_millions']\n","voter_turnout_data.columns = ['state', 'total_registered', 'total_ballots_cast', 'average_turnout_percentage']\n","election_data.columns = ['state', 'winning_party', 'winning_party_percentage', 'second_place_percentage', 'margin_of_victory']\n","\n","# Step 3: Merge Datasets Sequentially on the `state` Column\n","merged_data = data_for_merging.merge(ad_spending_data, on='state', how='left')\n","merged_data = merged_data.merge(voter_turnout_data, on='state', how='left')\n","merged_data = merged_data.merge(election_data, on='state', how='left')\n","\n","# Display the final merged dataset structure\n","print(\"Final Merged Dataset:\")\n","print(merged_data.head())\n","\n","# Save to a new CSV file if needed\n","merged_data.to_csv('/content/drive/MyDrive/flip-prediction-project/data/processed/final_merged_dataset.csv', index=False)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2Sf6CjeXiHRq","executionInfo":{"status":"ok","timestamp":1730763459235,"user_tz":480,"elapsed":1825,"user":{"displayName":"Simarpal Singh","userId":"11972719377733578956"}},"outputId":"f6d0c1a4-6004-4fab-dd2e-3f11500dc1fc"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Final Merged Dataset:\n","            state  median_age  male_to_female_ratio  white_percentage  \\\n","0        Michigan          67                  0.97              73.9   \n","1         Florida          42                  0.94              57.7   \n","2  North Carolina          42                  0.94              62.2   \n","3          Nevada          47                  1.00              51.2   \n","\n","   black_percentage  asian_percentage  hispanic_latino_percentage  \\\n","0              13.7               3.3                         5.6   \n","1              15.1               3.0                        26.5   \n","2              20.5               3.3                        10.7   \n","3               9.8               8.8                        28.7   \n","\n","   total_ad_spending_millions  total_registered  total_ballots_cast  \\\n","0                       102.0         1504518.0            939592.0   \n","1                       258.0        14052552.0          10051366.0   \n","2                       111.0         7371229.0           5544018.0   \n","3                        28.0         1821864.0           1425026.0   \n","\n","   average_turnout_percentage winning_party  winning_party_percentage  \\\n","0                   56.955922           DEM                 51.413559   \n","1                   67.740313           REP                 51.694755   \n","2                   75.519972           REP                 50.684183   \n","3                   82.132716           DEM                 51.223117   \n","\n","   second_place_percentage  margin_of_victory  \n","0                48.586441           2.827119  \n","1                48.305245           3.389509  \n","2                49.315817           1.368365  \n","3                48.776883           2.446235  \n"]}]}]}